# 配列[位置、取得する長さ]
a = [1,2,3,4,5]
p a[1,3]

#「values_atメソッド」　取得したい要素の添字を複数指定
a = [1,2,3,4,5]
p a.values_at(0,2,4)

a = [1,2,3,4,5]
p a[a.size-1] # 「配列の長さ−１」で最後の要素を取得
p a[-1] #配列の最後の要素
p a[-2] #配列の最後から2番目の要素
p a.last #配列の最後の要素
p a.last(2) #配列の最後から2番目の要素から２つの要素
p a.first #配列の最初の要素
p a.first(2) #配列の最初の要素から２つの要素

b = []
b.push(1) #要素の追加
b.push(2,3)
p b

a.delete(2) #配列から値が２の要素を削除
p a

# 配列の連結
c = [5]
d = [2,3]
p c.concat(d) #cは変更される（破壊的）dは変更されない

c = [5]
d = [2,3]
p c + d #cもdも変更されない（非破壊的）

e = [6,7,8]
f = [8,9,10]
p e | f #重複なしの和集合の配列
p e - f #eからfに含まれる要素を除く
p e & f #２つの配列に共通する要素を返す

#本格的な集合演算 Setクラス
require 'set'

e = Set.new([6,7,8])
f = Set.new([8,9,10])
p e | f
p e - f
p e & f

g, h = 10,20,30 #要素30は切り捨てられる
g, *h = 10,20,30 #hが残りの要素全てを配列として受ける

i = []
j = [2,3]
i.push(1)
i.push(*j) #splat展開　*をつけることでjの配列は展開されて、iと１つの配列となる
p i

# splat展開の応用
def greeting(*names)
  "#{names.join('と')}、こんにちは！"
end
puts greeting('田中さん')
puts greeting('田中さん','鈴木さん','佐藤さん')

# %記法 シングルやダブルクオートいらない、カンマも不要（空白で代用）
p ['東京','大阪','福岡']
p %w!東京 大阪 福岡! #!で囲む
p %w(東京 大阪 福岡) #()で囲む
p %w(東京\ 大阪\ 福岡) #\でスペースを含む

#文字列を配列に変換
p 'こんにちは'.chars #charsメソッド 文字列の１文字ずつを配列要素に分解

p '北海道,沖縄,名古屋'.split(',') #splitメソッド　文字列を配列に分割

a = Array.new # a = []と同じ
a = Array.new(5,0) #要素が５つ、初期値が０の配列
a = Array.new(10){|n| n % 5 + 1} #要素が１０、１〜５を２回繰り返す配列ができる
